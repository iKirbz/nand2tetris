// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the  instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        
    Not(in=instruction[15], out=aIns);
    And(a=instruction[15] , b=true, out=cIns);

    And(a=cIns, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=aluOut, sel=ALUtoA, out=aRegisterIn);

    Or(a=aIns, b=ALUtoA, out=loadA);
    ARegister(in=aRegisterIn, load=loadA, out[0..14]=addressM, out=aRegisterOut);
    
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluInBottom);
    
    And(a=cIns , b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegisterOut);
    
    ALU(x=dRegisterOut, y=aluInBottom, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);

    And(a=instruction[3], b=cIns, out=writeM);
    
    Not(in=ng, out=notNG);
    Not(in=zr, out=notZR);

    And(a=instruction[2], b=ng, out=jump1);    // (instruction[2] & ng)
    And(a=instruction[1], b=zr, out=jump2);    // (instruction[1] & zr)

    And(a=instruction[0], b=notNG, out=temp1);
    And(a=temp1, b=notZR, out=jump3);  // (instruction[0] & !ng & !zr)
    And(a=instruction[2], b=instruction[1], out=temp2);
    And(a=temp2, b=instruction[0], out=jump4);  // (instruction[2] & instruction[1] & instruction[0])

    // Combine all terms
    Or(a=jump1, b=jump2, out=temp3);
    Or(a=temp3, b=jump3, out=temp4);
    Or(a=temp4, b=jump4, out=jump);

    And(a=jump, b=instruction[15], out=jumpREALLY);

    PC(in=aRegisterOut, load=jumpREALLY, inc=true, reset=reset, out[0..14]=pc);
}